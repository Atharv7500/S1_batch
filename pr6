#include <iostream>
using namespace std;

// Node structure
struct Node {
    int data;
    Node* next;
};

// Circular Queue class
class CircularQueue {
private:
    Node* front;
    Node* rear;
public:
    CircularQueue() {
        front = rear = nullptr;
    }

    // Function to check if the queue is empty
    bool isEmpty() {
        return front == nullptr;
    }

    // Function to insert an element (enqueue) into the circular queue
    void enqueue(int value) {
        Node* temp = new Node();
        temp->data = value;
        if (isEmpty()) {
            front = rear = temp;
            rear->next = front;
        } else {
            rear->next = temp;
            rear = temp;
            rear->next = front;
        }
    }

    // Function to delete an element (dequeue) from the circular queue
    int dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return -1;
        }
        int value;
        if (front == rear) {
            value = front->data;
            delete front;
            front = rear = nullptr;
        } else {
            Node* temp = front;
            value = front->data;
            front = front->next;
            rear->next = front;
            delete temp;
        }
        return value;
    }

    // Function to display the elements of the circular queue
    void display() {
        if (isEmpty()) {
            cout << "Queue is empty" << endl;
            return;
        }
        Node* temp = front;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != front);
        cout << endl;
    }
};

int main() {
    CircularQueue q;

    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.enqueue(40);

    cout << "Circular Queue contents: ";
    q.display();

    cout << "Deleted element: " << q.dequeue() << endl;
    cout << "Circular Queue contents after deletion: ";
    q.display();

    return 0;
}
