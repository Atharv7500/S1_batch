#include <iostream>

using namespace std;

struct Node

{

int data;

struct Node *next;

};

struct Node* top = NULL;

void push(int val)

{

struct Node* newnode = (struct Node*) malloc(sizeof(struct Node));

newnode->data = val;

newnode->next = top;

top = newnode;

}

void pop()

{

if(top==NULL)

cout<<"\n Stack Underflow"<<endl;

else

{

cout<<"\n The popped element is "<< top->data <<endl;

top = top->next;

}

}

void display()

{

struct Node* ptr;

if(top==NULL)

cout<<"\n stack is empty";

else

{

ptr = top;

cout<<"\n Stack elements are: ";

while (ptr != NULL)

{

cout<< ptr->data <<" ";

ptr = ptr->next;

}

cout<<endl;

}
}

int main()

{

int ch, val;

cout<<"\n 1) Push in stack";

cout<<"\n 2) Pop from stack";

cout<<"\n 3) Display stack";

cout<<"\n 4) Exit";

do

{

cout<<"\n Enter choice: ";

cin>>ch;

switch(ch)

{

case 1:

cout<<"\n Enter value to be pushed:";

cin>>val;

push(val);

break;

case 2:

pop();

break;

case 3:

display();

break;

case 4:

cout<<"\n Exit";

break;

}

}while(ch!=4);

return 0;

}

### Part 2: Converting Infix Expression to Postfix

```cpp
#include <iostream>

using namespace std;

int priority(char c);

char infix[20],stack[20];

int i=0,j=0;

int main()

{

int p1;

cout<<"Enter infix expression:";

cin>>infix;

cout<<"output expression is:";

do

{

p1=priority(infix[i]);

if(p1==6)

cout<<infix[i];

else

{

if(j==0)

{

stack[j]=infix[i];

j++;

}

else if(p1==4)

{

stack[j]=infix[i];

j++;

}

else if(p1==5)

{

do

{

cout<<stack[j-1]<< " ";

j--;

}while(stack[j-1]!='(');

j--;

}

else if(p1>priority(stack[j-1])||stack[j-1]=='(')

{

stack[j]=infix[i];

j++;

}

else if(p1<=priority(stack[j-1]))

{
while(p1<=priority(stack[j-1])&&stack[j-1]!='('&&j!=0)

{

cout<<stack[j-1]<< " ";

j--;

}

stack[j]=infix[i];

j++;

} //end of if

} //end of main else

i++;

}while(infix[i]!=NULL);

for(i=j-1;i>=0;i--) //print remaining operators of stack

cout<<stack[i]<< " ";

return 0;

}

int priority(char c)

{

int p;

if(c=='+'|| c=='-')

p=1;

else if(c=='*'|| c=='/')

p=2;

else if(c=='(')

p=4;

else if(c==')')

p=5;

else

p=6;

return(p);

}
