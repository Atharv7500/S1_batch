#include <iostream>
#include <string>
using namespace std;

// Node structure
struct Node {
    char data;
    Node* next;
};

// Stack class
class Stack {
private:
    Node* top;
public:
    Stack() { top = nullptr; }

    // Function to push an element onto the stack
    void push(char x) {
        Node* t = new Node;
        if (t == nullptr) {
            cout << "Stack Overflow" << endl;
        } else {
            t->data = x;
            t->next = top;
            top = t;
        }
    }

    // Function to pop an element from the stack
    char pop() {
        char x = -1;
        if (top == nullptr) {
            cout << "Stack Underflow" << endl;
        } else {
            Node* t = top;
            top = top->next;
            x = t->data;
            delete t;
        }
        return x;
    }

    // Function to check if the stack is empty
    bool isEmpty() {
        return top == nullptr;
    }

    // Function to get the top element of the stack
    char stackTop() {
        if (top)
            return top->data;
        return -1;
    }
};

### Part 2: Converting Infix Expression to Postfix

```cpp
#include <iostream>
#include <string>
using namespace std;

class Stack {
private:
    struct Node {
        char data;
        Node* next;
    };
    Node* top;
public:
    Stack() { top = nullptr; }

    void push(char x) {
        Node* t = new Node;
        if (t == nullptr) {
            cout << "Stack Overflow" << endl;
        } else {
            t->data = x;
            t->next = top;
            top = t;
        }
    }

    char pop() {
        char x = -1;
        if (top == nullptr) {
            cout << "Stack Underflow" << endl;
        } else {
            Node* t = top;
            top = top->next;
            x = t->data;
            delete t;
        }
        return x;
    }

    bool isEmpty() {
        return top == nullptr;
    }

    char stackTop() {
        if (top)
            return top->data;
        return -1;
    }
};

// Function to determine precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to check if the character is an operator
bool isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Function to convert infix to postfix
string infixToPostfix(string infix) {
    Stack stk;
    string postfix = "";
    for (char &ch : infix) {
        if (isalnum(ch)) {
            postfix += ch;
        } else if (ch == '(') {
            stk.push(ch);
        } else if (ch == ')') {
            while (!stk.isEmpty() && stk.stackTop() != '(') {
                postfix += stk.pop();
            }
            stk.pop(); // Remove '(' from stack
        } else if (isOperator(ch)) {
            while (!stk.isEmpty() && precedence(stk.stackTop()) >= precedence(ch)) {
                postfix += stk.pop();
            }
            stk.push(ch);
        }
    }
    while (!stk.isEmpty()) {
        postfix += stk.pop();
    }
    return postfix;
}

int main() {
    string infix = "a+b*(c^d-e)^(f+g*h)-i";
    cout << "Infix Expression: " << infix << endl;
    cout << "Postfix Expression: " << infixToPostfix(infix) << endl;
    return 0;
}
